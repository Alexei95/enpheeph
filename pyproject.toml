# setuptools configuration
# this is the default for setuptools
# build is only required for building the distribution
# it is not strictly required for creating the package
[build-system]
    requires = ["setuptools >= 67.4.0"]
    build-backend = "setuptools.build_meta"

# this is still not supported by setuptools
[project]
    name = "enpheeph"
    description = "Neural Fault Injection Framework"
    keywords = ["faultinjection", "neuralnetworks"]
    license = {text = "GNU Affero General Public License v3 or later (AGPLv3+)"}
    dynamic = ["classifiers", "readme", "version"]
    requires-python = ">=3.10"
    dependencies = [
        # for pkg_resources, to parse version info from optional requirements
        # not required anymore as we switched to importlib.metadata.version
        # "setuptools >= 58.0",
        "packaging >= 23.0",
    ]
    authors = [
        {name = "Alessio 'Alexei95' Colucci", email = "enpheeph@alexei95.aleeas.com"},
    ]
    maintainers = [
        {name = "Alessio 'Alexei95' Colucci", email = "enpheeph@alexei95.aleeas.com"},
    ]


[project.optional-dependencies]
    # one can use self-dependency to include other optional-dependencies
    # supported by pip>=21.2

    # PACKAGE DEPENDENCIES
    cupy = [
        "cupy >= 11.5.0",
    ]
    norse = [
        "norse >= 1.0.0",
    ]
    numpy = [
        "numpy >= 1.23",
    ]
    pytorch-lightning = [
        "pytorch-lightning >= 1.9.3",
    ]
    sqlalchemy = [
        "sqlalchemy >= 2.0.4",
    ]
    torch = [
        "torch >= 1.13.1",
    ]

    # FUNCTIONALITIES DEPENDENCIES
    norse-cpu = [
        "enpheeph[torch-cpu]",
        "enpheeph[norse]",
    ]
    norse-gpu = [
        "enpheeph[torch-gpu]",
        "enpheeph[norse]",
    ]
    torch-cpu = [
        "enpheeph[numpy]",
        "enpheeph[torch]",
    ]
    torch-gpu = [
        "enpheeph[cupy]",
        "enpheeph[torch]",
    ]

    # INTEGRATIONS DEPENDENCIES
    integrations-pytorch-lightning = [
        "enpheeph[torch]",
        "enpheeph[pytorch-lightning]",
    ]

    # DEVELOPMENT PACKAGES
    black = [
        "black >= 23.1.0",
    ]
    coverage = [
        # for using pyproject.toml as configuration in pytest-coverage
        "coverage[toml] >= 7.2.1 ",
    ]
    flake8 = [
        "flake8 >= 6.0.0",
    ]
    mkinit = [
        "mkinit >= 1.0.0",
    ]
    mypy = [
        "mypy >= 1.0",
    ]
    nox = [
        "nox >= 2022.11.21",
    ]
    pre-commit = [
        "pre-commit >= 3.1.1",
    ]
    pyright = [
        "pyright >= 1.1.296",
    ]
    pytest = [
        "pytest >= 7.2.1",
    ]
    pytest-cases = [
        "pytest-cases >= 3.6.14",
    ]
    pytest-cov = [
        "pytest-cov >= 4.0.0",
    ]
    pytest-xdist = [
        "pytest-xdist >= 3.2.0",
    ]
    tox = [
        "tox >= 4.4.6",
    ]
    tox-conda = [
        "tox-conda >= 0.10.2",
    ]
    torchaudio = [
        "torchaudio >= 0.13.1",
    ]
    torchvision = [
        "torchvision >= 0.14.1",
    ]

    # higher level development dependencies
    pytest-full = [
        "enpheeph[pytest]",
        "enpheeph[pytest-cases]",
        "enpheeph[pytest-cov]",
        "enpheeph[pytest-xdist]",
    ]
    tox-full = [
        "enpheeph[tox]",
        "enpheeph[tox-conda]",
    ]

    # DEVELOPMENT DEPENDENCIES
    # these dependencies should become a single dependency line per package as
    # for functionalities
    dev-test = [
        "enpheeph[coverage]",
        "enpheeph[nox]",
        "enpheeph[pytest-full]",
        "enpheeph[pytorch-lightning]",
        "enpheeph[torchvision]",
    ]

    dev-tools = [
        "enpheeph[black]",
        "enpheeph[flake8]",
        "enpheeph[mkinit]",
        "enpheeph[mypy]",
        "enpheeph[pre-commit]",
        "enpheeph[pyright]",
    ]

    dev = [
        "enpheeph[dev-test]",
        "enpheeph[dev-tools]",
    ]

    # COMPLETE DEPENDENCIES
    full-cpu = [
        "enpheeph[integrations-pytorch-lightning]",
        "enpheeph[norse-cpu]",
        "enpheeph[sqlalchemy]",
        "enpheeph[torch-cpu]",
    ]
    full-gpu = [
        "enpheeph[integrations-pytorch-lightning]",
        "enpheeph[norse-gpu]",
        "enpheeph[sqlalchemy]",
        "enpheeph[torch-gpu]",
    ]

    full-dev-cpu = [
        "enpheeph[full-cpu]",
        "enpheeph[dev]",
    ]
    full-dev-gpu = [
        "enpheeph[full-gpu]",
        "enpheeph[dev]",
    ]


# [project.urls]
#     homepage = "example.com"
#     documentation = "readthedocs.org"
#     repository = "github.com"
#     changelog = "github.com/me/spam/blob/master/CHANGELOG.md"


# black configuration
[tool.black]
    # we use 88 as line-break, which is the default
    line-length = 88
    # we target also older python versions
    target-version = [
        # 'py37',
        'py38',
        'py39',
        # Python 3.9/3.10 is not yet supported
        'py310'
    ]
    # the include is the standard one for all the files ending in .py
    include = '\.pyi?$'
    # the directories and flies to exclude extra to the defaults
    extend-exclude = '''
    /(
        # the version control directories
        \.git
    | \.github
    | \.hg
    # mypy cache
    | \.mypy_cache
    # vscode directory
    | \.vscode
    | docs
    | requirements
    )/
    '''


# section for coverage.py config
[tool.coverage]

[tool.coverage.run]
    # everything to be included in coverage, include is valid if source is not set
    # and it works as a pattern matcher
    # include = [
    #     "src/*",
    # ]
    # to avoid measuring the coverage of test files
    # must be a list
    omit = [
        "tests/*",
        # to avoid covering the __init__
        "*/__init__.py",
        # avoid covering __about__.py
        "*/__about__.py",
    ]
    # source to define where to look for packages
    source = [
        "src/",
        # also the package name should work
        "enpheeph",
    ]


# [tool.distutils.bdist_rpm]
# doc-files = "docs extras AUTHORS INSTALL LICENSE README.rst"
# install-script = "scripts/rpm-install.sh"


# flake8 is not really ready for pyproject.toml, unless one uses pyproject-flake8
# [tool.flake8]
# the following one is the original .flake8 configuration
# [tool.flake8]
# max-line-length = 88
# extend-ignore = E203
# exclude =
#     # No need to traverse our git directory
#     .git,
#     # There's no value in checking cache directories
#     __pycache__,
#     docs,
#     # This contains our built documentation
#     build,
# max-complexity = 10
# this config is a copy from .flake8, so that it can be used both with
# flake8 and pflake8
[tool.flake8]
    max-line-length = 88
    extend-ignore = "E203, "
    exclude = [
        # No need to traverse our git directory
        ".git",
        # There's no value in checking cache directories
        "__pycache__",
        # we exclude all __init__.py as they are auto-generated
        "**/__init__.py",
    ]
    max-complexity = 10


[tool.mypy]
    # Typing tests is low priority, but enabling type checking on the
    # untyped test functions (using `--check-untyped-defs`) is still
    # high-value because it helps test the typing.
    # taken from https://github.com/PyTorchLightning/pytorch-lightning/blob/1c8ad3a94bce2d0b5e62b5e5a4395bb6fb25642d/setup.cfg#L95
    check_untyped_defs = true
    disallow_any_generics = true
    disallow_untyped_defs = true
    # we exclude this folder due to the issues with mypy-sqlalchemy plugin
    # also we skip the tests folder
    # we can use multiline and single quotes to avoid escaping slashes
    exclude = [
        '/sqlstorageplugin/',
        '/tests/',
        '/setup\.py$'
    ]
    ignore_missing_imports = true
    no_implicit_optional = true
    no_implicit_reexport = true
    # plugin to support sqlalchemy
    # this must be disabled when usin pre-commit mypy
    # as it does not have any extra dependencies installed
    plugins = "sqlalchemy.ext.mypy.plugin"
    python_version = "3.9"
    show_error_codes = true
    strict_equality = true
    warn_redundant_casts = true
    warn_return_any = true
    warn_unreachable = true
    warn_unused_configs = true
    warn_unused_ignores = true

# we skip the errors because of the import problems
# however this needs to be added only for the pre-commit hook
# [[tool.mypy.overrides]]
# module = "enpheeph.*"
# ignore_errors = true

# pytest config
# check if required
[tool.pytest.ini_options]
    # cli options, -ra to show extra summary for all tests except passed
    # -rA shows summary for everything
    # -n auto is for pytest-xdist to distribute tests
    # the cov config is in pyproject.toml, while cov is for the path to coverage
    addopts = "-rA -n auto --cov-config=pyproject.toml --cov-append --cov-report=term-missing -vvv --durations=0 --full-trace"
    # do not show progress bar
    console_output_style = "classic"
    # minimum pytest version
    minversion = "7.2.1"
    # the paths to be searched for tests
    testpaths = [
        "tests",
    ]


[tool.setuptools]
    include-package-data = true
    zip-safe = true


[tool.setuptools.dynamic]
    classifiers = {file = "CLASSIFIERS"}
    readme = {file = ["README.md",]}
    version = {attr = "enpheeph.__about__.__version__"}
