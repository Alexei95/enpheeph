# setuptools configuration
# this is the default for setuptools and wheel
[build-system]
    requires = ["setuptools >= 58.0", "wheel"]
    build-backend = "setuptools.build_meta"

# this is still not supported by setuptools
[project]
    name = "enpheeph"
    description = "Neural Fault Injection Framework"
    readme = "README.md"
    classifiers = [
        "Development Status :: 2 - Pre-Alpha",
        "Intended Audience :: Developers",
        # "License :: OSI Approved :: BSD License",
        "Operating System :: OS Independent",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
    ]
    # dynamic = ["version"]
    requires-python = ">=3.8"
    dependencies = [
        # for pkg_resources, to parse version info from optional requirements
        "setuptools >= 58.0",
        "packaging >= 20.0",
    ]

    [[project.author]]
        name = "Alessio Colucci"
        email = "pm@alexei95.aleeas.com"


[project.license]
    text = "AGPLv3"


# [project.urls]
# Homepage = "https://www.djangoproject.com/"
# Documentation = "https://docs.djangoproject.com/"
# "Release notes" = "https://docs.djangoproject.com/en/stable/releases/"
# Funding = "https://www.djangoproject.com/fundraising/"
# Source = "https://github.com/django/django"
# Tracker = "https://code.djangoproject.com/"


[project.optional-dependencies]
    # one can use self-dependency to include other optional-dependencies
    # supported by pip>=21.2

    # FUNCTIONALITIES DEPENDENCIES
    cupy = [
        "cupy >= 9.0.0",
    ]
    norse = [
        "norse >= 0.0.7",
    ]
    numpy = [
        "numpy >= 1.19",
    ]
    sqlalchemy = [
        "sqlalchemy >= 1.4.20",
    ]
    torch = [
        "torch >= 1.8, < 1.10.0",
    ]

    torch-cpu = [
        "enpheeph[numpy]",
        "enpheeph[torch]",
    ]
    torch-gpu = [
        "enpheeph[cupy]",
        "enpheeph[torch]",
    ]

    norse-cpu = [
        "enpheeph[torch-cpu]",
        "enpheeph[norse]",
    ]
    norse-gpu = [
        "enpheeph[torch-gpu]",
        "enpheeph[norse]",
    ]

    # INTEGRATIONS DEPENDENCIES
    integrations-pytorch-lightning = [
        "enpheeph[torch]",
        "pytorch-lightning >= 1.5",
    ]

    # DEVELOPMENT DEPENDENCIES
    dev-test = [
        # for using pyproject.toml as configuration in pytest-coverage
        "coverage[toml]",
        "pytest >= 6.2.0",  # 6.2.5 for Python 3.10+
        "pytest-cov",
        "pytest-xdist",
        "tox >= 3.20.0",
    ]

    dev-tools = [
        "black",
        "flake8",
        "mkinit >= 0.3.3",
        "mypy",
        "pre-commit",
    ]

    dev = [
        "enpheeph[dev-test]",
        "enpheeph[dev-tools]",
    ]

    # COMPLETE DEPENDENCIES
    full = [
        "enpheeph[integrations-pytorch-lightning]",
        "enpheeph[sqlalchemy]",
        "enpheeph[torch-cpu]",
        "enpheeph[torch-gpu]",
    ]

    full-dev = [
        "enpheeph[full]",
        "enpheeph[dev]",
    ]


# [project.scripts]
# django-admin = "django.core.management:execute_from_command_line"


# black configuration
[tool.black]
    # we use 88 as line-break, which is the default
    line-length = 88
    # we target also older python versions
    target-version = [
        # 'py37',
        'py38',
        'py39',
        # Python 3.9/3.10 is not yet supported
        # 'py310'
    ]
    # the include is the standard one for all the files ending in .py
    include = '\.pyi?$'
    # the directories and flies to exclude extra to the defaults
    extend-exclude = '''
    /(
        # the version control directories
        \.git
    | \.github
    | \.hg
    # mypy cache
    | \.mypy_cache
    # vscode directory
    | \.vscode
    | docs
    | requirements
    )/
    '''


# section for coverage.py config
[tool.coverage]

[tool.coverage.run]
    # everything to be included in coverage, include is valid if source is not set
    # and it works as a pattern matcher
    # include = [
    #     "src/*",
    # ]
    # to avoid measuring the coverage of test files
    # must be a list
    omit = [
        "tests/*",
        # to avoid covering the __init__
        "*/__init__.py",
        # avoid covering __about__.py
        "*/__about__.py",
    ]
    # source to define where to look for packages
    source = [
        "src/",
    ]


# [tool.distutils.bdist_rpm]
# doc-files = "docs extras AUTHORS INSTALL LICENSE README.rst"
# install-script = "scripts/rpm-install.sh"


# flake8 is not really ready for pyproject.toml, unless one uses pyproject-flake8
# [tool.flake8]
# the following one is the original .flake8 configuration
# [tool.flake8]
# max-line-length = 88
# extend-ignore = E203
# exclude =
#     # No need to traverse our git directory
#     .git,
#     # There's no value in checking cache directories
#     __pycache__,
#     docs,
#     # This contains our built documentation
#     build,
# max-complexity = 10
# this config is a copy from .flake8, so that it can be used both with
# flake8 and pflake8
[tool.flake8]
    max-line-length = 88
    extend-ignore = "E203, "
    exclude = [
        # No need to traverse our git directory
        ".git",
        # There's no value in checking cache directories
        "__pycache__",
        # we exclude all __init__.py as they are auto-generated
        "**/__init__.py",
    ]
    max-complexity = 10


[tool.mypy]
    # Typing tests is low priority, but enabling type checking on the
    # untyped test functions (using `--check-untyped-defs`) is still
    # high-value because it helps test the typing.
    # taken from https://github.com/PyTorchLightning/pytorch-lightning/blob/1c8ad3a94bce2d0b5e62b5e5a4395bb6fb25642d/setup.cfg#L95
    check_untyped_defs = true
    disallow_any_generics = true
    disallow_untyped_defs = true
    # we exclude this folder due to the issues with mypy-sqlalchemy plugin
    # also we skip the tests folder
    # we can use multiline and single quotes to avoid escaping slashes
    exclude = [
        '/sqlstorageplugin/',
        '/tests/',
        '/setup\.py$'
    ]
    ignore_missing_imports = true
    no_implicit_optional = true
    no_implicit_reexport = true
    # plugin to support sqlalchemy
    # this must be disabled when usin pre-commit mypy
    # as it does not have any extra dependencies installed
    plugins = "sqlalchemy.ext.mypy.plugin"
    python_version = "3.9"
    show_error_codes = true
    strict_equality = true
    warn_redundant_casts = true
    warn_return_any = true
    warn_unreachable = true
    warn_unused_configs = true
    warn_unused_ignores = true

# we skip the errors because of the import problems
# however this needs to be added only for the pre-commit hook
# [[tool.mypy.overrides]]
# module = "enpheeph.*"
# ignore_errors = true

# pytest config
# check if required
[tool.pytest.ini_options]
    # cli options, -ra to show extra summary for all tests except passed
    # -rA shows summary for everything
    # -n auto is for pytest-xdist to distribute tests
    # the cov config is in pyproject.toml, while cov is for the path to coverage
    addopts = "-rA -n auto --cov-config=pyproject.toml -vvv --durations=0 --full-trace"
    # do not show progress bar
    console_output_style = "classic"
    # minimum pytest version
    minversion = "6.2"
    # the paths to be searched for tests
    testpaths = [
        "tests",
    ]


[tool.setuptools]
    # we look for packages in src only
    packages = {find = "src"}
    include-package-data = true
    zip-safe = false


[tool.setuptools.dynamic]
    # version = {attr = "enpheeph.__about__.__version__"}
    version = "0.0.1"

# tox is a tool for multiple local test environments
[tool.tox]
# isolated_build is to use pyproject.toml when building
# isolated_build = True
# tox-conda enables using conda for installing extra dependencies
# it additionally auto-installs the required python versions if not present
# requires = tox-conda
# py310 does not work as norse and torch have issues
# we use the pytest --cov command to ensure proper coverage data collection
# otherwise coverage does not have access to the proper source code if referred to
# the local directory
# https://github.com/pytest-dev/pytest-cov/issues/98#issuecomment-382583824
# pytest --cov={envsitepackagesdir}/enpheeph
# additional pytest options and depends in [testenv] are used for coverage report
# when using tox https://pytest-cov.readthedocs.io/en/latest/tox.html
# cov-append appends the report
# depends create the execution order, where clean must be executed before the tests
# and report only afterwards
# [gh] is the section for GitHub Actions, taken from tox-gh on GitHub
# {posargs} add additional positional arguments taken from cli or env
# envtmpdir can be used as temporary log, but it is cleared with every testenv
# use envlogdir which is in common, but with custom sub-paths
legacy_tox_ini = """
[tox]
envlist = clean,py38,py39,report

[testenv]
envlogdir = .logs/
commands =
    pytest \
        -vv \
        --cov={envsitepackagesdir}/enpheeph \
        --cov-append \
        --cov-report=term-missing \
        --junitxml={envlogdir}/tools/pytest/junit-{envname}.xml \
        {posargs}
extras = dev
depends =
    {py38,py39}: clean
    report: py38,py39

[testenv:report]
envlogdir = .logs/
deps = coverage[toml]
skip_install = true
commands =
    coverage report
    coverage xml -o {envlogdir}/tools/coverage/coverage.xml

[testenv:clean]
envlogdir = .logs/
deps = coverage[toml]
skip_install = true
commands = coverage erase

[gh]
python =
    3.8 = py38
    3.9 = py39, report, clean
"""
