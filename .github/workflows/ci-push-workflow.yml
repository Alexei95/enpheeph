name: ci-push-workflow

# events that trigger the workflow
on:
  # we select push for the selected branches
  push:
    # branches:
    #   - main
    #   - dev

jobs:
  # name of the job
  # this job updates the __init__.pys to include recursively all the attributes
  # it is run on all push/pull requests
  mkinit-init-attribute-update:
    # this needs to be executed only if there is a push, as there are commit
    # permissions with the secrets
    if: github.event_name == 'push'
    # the system to run on
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - 3.9

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 40

    steps:
    # we check out the repository
    - name: Repository check-out
      uses: actions/checkout@v2.4.0

    # we set up the Python environment
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.3.1
      with:
        python-version: ${{ matrix.python-version }}

    # answer https://stackoverflow.com/a/60942437
    # then the datetime is available as ${{ steps.datetime.outputs.datetime }}
    - name: Get current date/time
      id: datetime
      run: |
        echo "::set-output name=datetime::$(date +'%Y-%m-%dT%H:%M:%S')"

    # answer https://stackoverflow.com/a/60302058
    # it gets only the branch name from GITHUB_REF refs/heads/<branch_name>
    # **NOTE**: this does not work for pull requests
    # - name: Get branch_name
    #     id: branch_name
    #     run: |
    #       echo "::set-output name=branch_name::${GITHUB_REF#refs/heads/}"

    - name: Install mkinit
      run: |
        python --version
        pip --version
        pip install mkinit==0.3.4
        pip list
      shell: bash

    - name: Run mkinit
      # we run mkinit in a recursive way, defining also the internal __init__.py
      # we use black as code style
      # lazy is for triggering the lazy imports, only when the attributes are
      # accessed
      # write is to write the changes
      # verbose 2 is the DEBUG level for the Python logging
      run: |
        mkinit --recursive --black --lazy --write --verbose 2 src/enpheeph > mkinit-${{ steps.datetime.outputs.datetime }}.log

    - uses: stefanzweifel/git-auto-commit-action@v4.13.1
      with:
        # Optional, but recommended
        # Defaults to "Apply automatic changes"
        commit_message: "CI - mkinit: Update __init__.py recursively"

        # Optional branch name where commit should be pushed to.
        # Defaults to the current branch.
        # branch: feature-123

        # Optional. Used by `git-commit`.
        # See https://git-scm.com/docs/git-commit#_options
        # commit_options: '--no-verify --signoff'

        # Optional glob pattern of files which should be added to the commit
        # Defaults to all (.)
        # See the `pathspec`-documentation for git
        # - https://git-scm.com/docs/git-add#Documentation/git-add.txt-ltpathspecgt82308203
        # - https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec
        file_pattern: "**/__init__.py"

        # Optional local file path to the repository
        # Defaults to the root of the repository
        # repository: .

        # Optional commit user and author settings
        commit_user_name: GitHub Actions Bot - mkinit  # defaults to "GitHub Actions"
        # commit_user_email: my-github-actions-bot@example.org  # defaults to "actions@github.com"
        # commit_author: Author <actions@github.com>  # defaults to author of the commit that triggered the run

        # Optional tag message
        # Action will create and push a new tag to the remote repository and the defined branch
        # tagging_message: 'v1.0.0'

        # Optional. Used by `git-status`
        # See https://git-scm.com/docs/git-status#_options
        # status_options: '--untracked-files=no'

        # Optional. Used by `git-add`
        # See https://git-scm.com/docs/git-add#_options
        # add_options: '-u'

        # Optional. Used by `git-push`
        # See https://git-scm.com/docs/git-push#_options
        # push_options: '--force'

        # Optional. Disable dirty check and always try to create a commit and push
        # we disable it as we don't want commits with no changes
        skip_dirty_check: false

        # Optional. Skip internal call to `git fetch`
        skip_fetch: false

        # Optional. Prevents the shell from expanding filenames.
        # Details: https://www.gnu.org/software/bash/manual/html_node/Filename-Expansion.html
        disable_globbing: true

    # this is required for sharing data with other jobs, as each job has a
    # different runner
    - name: Upload mkinit log
      uses: actions/upload-artifact@v2.3.1
      with:
        name: mkunit-${{ steps.datetime.outputs.datetime }}
        path: mkunit-${{ steps.datetime.outputs.datetime }}.log


  pre-commit:
    # this needs to be executed only if there is a push, as there are commit
    # permissions with the secrets
    if: github.event_name == 'push'
    # to run after the job from the same workflow
    # if on different workflows, see https://stackoverflow.com/a/65698892
    needs: mkinit-init-attribute-update
    # the system to run on
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - 3.9

    steps:
    - name: Repository check-out
      uses: actions/checkout@v2.4.0
      with:
        # to have unlimited depth for pushing
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.3.1
      with:
        python-version: ${{ matrix.python-version }}

    - name: pre-commit Action
      uses: pre-commit/action@v2.0.3
      # to allow pushing
      with:
        extra_args: --hook-stage manual
        token: ${{ secrets.GITHUB_TOKEN }}


  # this job runs the tests with tox-conda using pytest and coverage
  # it must run after the init update
  # name of the job
  tox-conda-pytest-coverage:
    # to run after the job from the same workflow
    # if on different workflows, see https://stackoverflow.com/a/65698892
    needs: mkinit-init-attribute-update
    # the system to run on
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # for now a small grid is more than enough
        os:
          - ubuntu-18.04
          - ubuntu-20.04
        python-version:
          - 3.8
          - 3.9

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 40

    steps:
    # we check out the repository
    - name: Repository check-out
      uses: actions/checkout@v2.4.0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.3.1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install tox
      run: |
        python --version
        python -m pip --version
        python -m pip install tox

    - name: Setup conda
      uses: conda-incubator/setup-miniconda@v2.1.1
      # https://github.com/tox-dev/tox-conda/blob/
      # 9bd14a47e7a9f4d1258d64fc0e562b33aefa6288/.github/workflows/check.yml
      # taken from tox-conda CI workflow
      with:
        miniconda-version: "latest"
        python-version: ${{ matrix.python-version }}

    # we set up the Python environment
    # not needed if using conda
    # - name: Set up Python ${{ matrix.python-version }}
    #   uses: actions/setup-python@v2.3.1
    #   with:
    #     python-version: ${{ matrix.python-version }}

    # Github Actions: Run step on specific OS: https://stackoverflow.com/a/57948488/4521646

    - name: Setup tox test suite
      # we need tox4 as we are running tox v4.0.0a10
      run: |
        tox -r -vv --notest > tox-setup.log
      # for using/running conda, we need -l {0} to run as login sheel and have conda
      # enabled
      shell: bash -l {0}

    - name: Run tox test suite
      # we need tox4 as we are running tox v4.0.0a10
      run: |
        tox -r -vv --skip-pkg-install > tox-run.log
      # for using/running conda, we need -l {0} to run as login sheel and have conda
      # enabled
      shell: bash -l {0}

    # this is required for sharing data with other jobs, as each job has a
    # different runner
    - name: Upload tox results
      uses: actions/upload-artifact@v2.3.1
      with:
        # longer name ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}-${{ matrix.release }}
        name: tox-results-${{ runner.os }}-${{ matrix.python-version }}
        path: .logs/tools/

    # this is required for sharing data with other jobs, as each job has a
    # different runner
    - name: Upload tox setup log if failed
      uses: actions/upload-artifact@v2.3.1
      with:
        # longer name
        name: tox-setup-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}
        path: tox-setup.log
      if: failure()

    # this is required for sharing data with other jobs, as each job has a
    # different runner
    - name: Upload tox run log if failed
      uses: actions/upload-artifact@v2.3.1
      with:
        # longer name
        name: tox-run-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}
        path: tox-run.log
      if: failure()

    # for uploading coverage to codecov
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v1
    #   if: always()
    #   # see: https://github.com/actions/toolkit/issues/399
    #   continue-on-error: true
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }}
    #     file: coverage.xml
    #     flags: cpu,pytest,python${{ matrix.python-version }}
    #     name: CPU-coverage
    #     fail_ci_if_error: false
